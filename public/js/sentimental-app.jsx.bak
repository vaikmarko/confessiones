const { useState, useEffect, useRef } = React;

// Lucide icons as inline SVG components since we can't import them directly
const Search = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="11" cy="11" r="8"/>
    <path d="m21 21-4.35-4.35"/>
  </svg>
);

const Heart = ({ size = 16, filled = false }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill={filled ? "currentColor" : "none"} stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
  </svg>
);

const MessageCircle = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
  </svg>
);

const Sparkles = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .962 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.582a.5.5 0 0 1 0 .962L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.962 0L9.937 15.5z"/>
  </svg>
);

const Plus = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 5v14M5 12h14"/>
  </svg>
);

const Brain = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z"/>
    <path d="M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z"/>
    <path d="M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4"/>
    <path d="M17.599 6.5a3 3 0 0 0 .399-1.375"/>
    <path d="M6.003 5.125A3 3 0 0 0 6.401 6.5"/>
    <path d="M3.477 10.896a4 4 0 0 1 .585-.396"/>
    <path d="M19.938 10.5a4 4 0 0 1 .585.396"/>
    <path d="M6 18a4 4 0 0 1-1.967-.516"/>
    <path d="M19.967 17.484A4 4 0 0 1 18 18"/>
  </svg>
);

const Compass = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="10"/>
    <polygon points="16.24,7.76 14.12,14.12 7.76,16.24 9.88,9.88"/>
  </svg>
);

const BookOpen = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
    <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
  </svg>
);

const ChevronRight = ({ size = 14 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polyline points="9,18 15,12 9,6"/>
  </svg>
);

const FileText = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M14,2 L6,2 C4.9,2 4,2.9 4,4 L4,20 C4,21.1 4.9,22 6,22 L18,22 C19.1,22 20,21.1 20,20 L20,8 L14,2 Z"/>
    <polyline points="14,2 14,8 20,8"/>
    <line x1="16" y1="13" x2="8" y2="13"/>
    <line x1="16" y1="17" x2="8" y2="17"/>
    <polyline points="10,9 9,9 8,9"/>
  </svg>
);

const ArrowLeft = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <line x1="19" y1="12" x2="5" y2="12"/>
    <polyline points="12,19 5,12 12,5"/>
  </svg>
);

const Eye = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-8-11-8z"/>
    <circle cx="12" cy="12" r="3"/>
  </svg>
);

const Edit = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
  </svg>
);

const Globe = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
  </svg>
);

const Share = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
    <polyline points="16 6 12 10 8 6"/>
  </svg>
);

const User = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
    <circle cx="12" cy="7" r="4"/>
  </svg>
);

const Settings = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="3"/>
    <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1"/>
  </svg>
);

const ChevronLeft = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M15 18l-6-6 6-6"/>
  </svg>
);

const Trending = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"/>
    <polyline points="17 6 23 6 23 12"/>
  </svg>
);

const Clock = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="10"/>
    <polyline points="12 6 12 12 16 14"/>
  </svg>
);

const Stars = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/>
  </svg>
);

const Memories = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M8 2v4"/>
    <path d="M16 2v4"/>
    <rect width="18" height="18" x="3" y="4" rx="2"/>
    <path d="M3 10h18"/>
  </svg>
);

const Grid = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <rect width="7" height="7" x="3" y="3" rx="1"/>
    <rect width="7" height="7" x="14" y="3" rx="1"/>
    <rect width="7" height="7" x="3" y="14" rx="1"/>
    <rect width="7" height="7" x="14" y="14" rx="1"/>
  </svg>
);

const Music = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M9 18V5l12-2v13"/>
    <circle cx="6" cy="18" r="3"/>
    <circle cx="18" cy="16" r="3"/>
  </svg>
);

const Video = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polygon points="23 7 16 12 23 17 23 7"/>
    <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
  </svg>
);

const Play = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polygon points="5 3 19 12 5 21 5 3"/>
  </svg>
);

const Twitter = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"/>
  </svg>
);

const Facebook = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"/>
  </svg>
);

// Add missing icons that are in the reference code
const Share2 = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="18" cy="5" r="3"/>
    <circle cx="6" cy="12" r="3"/>
    <circle cx="18" cy="19" r="3"/>
    <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
    <line x1="15.42" y1="6.51" x2="8.59" y2="10.49"/>
  </svg>
);

const Home = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
    <polyline points="9,22 9,12 15,12 15,22"/>
  </svg>
);

const Users = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/>
    <circle cx="9" cy="7" r="4"/>
    <path d="m22 21-3-3"/>
    <circle cx="18" cy="16" r="3"/>
  </svg>
);

const Camera = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"/>
    <circle cx="12" cy="13" r="3"/>
  </svg>
);

const Linkedin = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"/>
    <rect width="4" height="12" x="2" y="9"/>
    <circle cx="4" cy="4" r="2"/>
  </svg>
);

const Lock = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <rect width="18" height="11" x="3" y="11" rx="2" ry="2"/>
    <path d="m7 11V7a5 5 0 0 1 10 0v4"/>
  </svg>
);

const Headphones = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3"/>
  </svg>
);

const Mail = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
    <polyline points="22,6 12,13 2,6"/>
  </svg>
);

const MessageSquare = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
  </svg>
);

const Mic = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"/>
    <path d="M19 10v2a7 7 0 0 1-14 0v-2"/>
    <line x1="12" y1="19" x2="12" y2="23"/>
    <line x1="8" y1="23" x2="16" y2="23"/>
  </svg>
);

const X = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <line x1="18" y1="6" x2="6" y2="18"/>
    <line x1="6" y1="6" x2="18" y2="18"/>
  </svg>
);

const Copy = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
  </svg>
);

// Format Icons
const getFormatIcon = (formatType) => {
  const icons = {
    song: '🎵',
    tweet: '🐦',
    article: '📝',
    video: '🎬',
    linkedin_post: '💼',
    fb_post: '👥',
    instagram_post: '📸',
    diary_entry: '📔',
    email: '📧',
    letter: '💌',
    poem: '🎭',
    script: '🎬'
  };
  return icons[formatType] || '📄';
};

// Main App Component
const SentimentalApp = () => {
  // State management
  const [currentView, setCurrentView] = useState('discover');
  const [stories, setStories] = useState([]);
  const [message, setMessage] = useState('');
  const [conversation, setConversation] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [user, setUser] = useState(null);
  const [showLogin, setShowLogin] = useState(false);
  const [loginEmail, setLoginEmail] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  const [selectedStory, setSelectedStory] = useState(null);
  const [selectedFormat, setSelectedFormat] = useState(null);
  const [formatContent, setFormatContent] = useState('');
  const [showComments, setShowComments] = useState({});
  const [storyComments, setStoryComments] = useState({});
  const [newComment, setNewComment] = useState('');
  const [aiProviders, setAIProviders] = useState([]);
  const [loadingFormat, setLoadingFormat] = useState(false);
  const [currentStoryView, setCurrentStoryView] = useState('story'); // 'story' or format type
  
  // Missing state variables that are referenced in the code
  const [likedStories, setLikedStories] = useState(new Set());
  const [comments, setComments] = useState({});
  const [messages, setMessages] = useState([]);
  const [loginForm, setLoginForm] = useState({ name: '', email: '', password: '' });
  const [previousView, setPreviousView] = useState('discover');
  const [selectedAI, setSelectedAI] = useState(0);

  // Initialize
  useEffect(() => {
    initializeApp();
  }, []);

  const initializeApp = async () => {
    // Check for existing user session
    const savedUser = localStorage.getItem('sentimental_user');
    if (savedUser) {
      setUser(JSON.parse(savedUser));
    }
    
    await loadAIProviders();
    await fetchStories();
  };

  const loadAIProviders = async () => {
    try {
      const response = await fetch('/api/ai/providers');
      const data = await response.json();
      if (data.success) {
        setAIProviders(data.providers);
      }
    } catch (err) {
      console.error('Error loading AI providers:', err);
    }
  };

  const fetchStories = async () => {
    setLoadingFormat(true);
    try {
      const response = await fetch('/api/stories');
      if (response.ok) {
        const data = await response.json();
        setStories(data);
      }
    } catch (error) {
      console.error('Error fetching stories:', error);
    }
    setLoadingFormat(false);
  };

  // Authentication Functions
  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const endpoint = showLogin ? '/api/auth/register' : '/api/auth/login';
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: loginEmail, password: loginPassword })
      });

      const data = await response.json();
      
      if (response.ok) {
        const userData = {
          id: data.user_id,
          email: data.email,
          name: data.name || 'User'
        };
        
        setUser(userData);
        localStorage.setItem('sentimental_user', JSON.stringify(userData));
        setShowLogin(false);
        setLoginEmail('');
        setLoginPassword('');
        
        alert(`${showLogin ? 'Registration' : 'Login'} successful!`);
      } else {
        alert(data.error || 'Authentication failed');
      }
    } catch (error) {
      console.error('Auth error:', error);
      alert('Authentication failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Google Authentication
  const handleGoogleAuth = async () => {
    if (!window.firebaseAuth || !window.authProviders) {
      alert('Google authentication is not available. Please check your internet connection and try again.');
      return;
    }

    setIsLoading(true);
    try {
      const result = await window.firebaseAuth.signInWithPopup(window.authProviders.google);
      const user = result.user;
      
      // Create user data from Google account
      const userData = {
        id: user.uid,
        email: user.email,
        name: user.displayName || user.email.split('@')[0],
        photoURL: user.photoURL
      };

      // Save to backend
      const response = await fetch('/api/auth/google', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          uid: user.uid,
          email: user.email,
          name: user.displayName,
          photoURL: user.photoURL,
          idToken: await user.getIdToken()
        })
      });

      if (response.ok) {
        const responseData = await response.json();
        setUser(userData);
        localStorage.setItem('sentimental_user', JSON.stringify(userData));
        setShowLogin(false);
        
        // Show success message based on whether it's a new user or existing user
        const isNewUser = response.status === 201;
        if (isNewUser) {
          alert(`🎉 Welcome to Sentimental, ${userData.name}! Your account has been created successfully.`);
        } else {
          alert(`👋 Welcome back, ${userData.name}!`);
        }
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Google authentication failed on our servers');
      }
    } catch (error) {
      console.error('Google auth error:', error);
      
      // Handle specific error types
      if (error.code === 'auth/popup-closed-by-user') {
        // User closed the popup, don't show error
        return;
      } else if (error.code === 'auth/popup-blocked') {
        alert('Google sign-in popup was blocked. Please allow popups for this site and try again.');
      } else if (error.code === 'auth/network-request-failed') {
        alert('Network error. Please check your internet connection and try again.');
      } else {
        alert('Google authentication failed: ' + (error.message || 'Unknown error occurred'));
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleLogout = () => {
    // Sign out from Firebase if user was logged in with Google
    if (window.firebaseAuth && user?.photoURL) {
      window.firebaseAuth.signOut().catch(error => {
        console.error('Error signing out from Firebase:', error);
      });
    }
    
    setUser(null);
    localStorage.removeItem('sentimental_user');
    setMessages([]);
    setCurrentView('discover');
  };

  // Chat Functions
  const sendMessage = async () => {
    if (!message.trim() || isLoading) return;
    if (!user) {
      setShowLogin(true);
      return;
    }

    const userMessage = {
      id: Date.now(),
      content: message,
      sender: 'You',
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    
    const messageToSend = message;
    setMessage('');

    try {
      const response = await fetch('/api/chat/message', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: messageToSend,
          user_id: user.id
        })
      });

      const data = await response.json();
      
      if (data.success) {
        const botMessage = {
          id: Date.now() + 1,
          content: data.message,
          sender: aiProviders[selectedAI]?.name || 'AI',
          timestamp: new Date().toISOString()
        };
        
        setMessages(prev => [...prev, botMessage]);
      } else {
        throw new Error(data.error || 'Failed to get response');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage = {
        id: Date.now() + 1,
        content: "Sorry, I'm having trouble connecting right now. Try again in a moment!",
        sender: 'System',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // Story Functions
  const createStoryFromConversation = async () => {
    if (!user) {
      setShowLogin(true);
      return;
    }

    try {
      setIsLoading(true);
      
      const response = await fetch('/api/stories', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-ID': user.user_id
        },
        body: JSON.stringify({
          title: generateStoryTitle(conversation[0]?.content || 'New Story'),
          content: conversation.map(msg => `${msg.sender}: ${msg.content}`).join('\n\n'),
          conversation: conversation
        })
      });

      if (response.ok) {
        const newStory = await response.json();
        setStories(prev => [newStory, ...prev]);
        setConversation([]);
        setCurrentView('stories');
        alert('Story created successfully from your conversation!');
      } else {
        const errorData = await response.json();
        alert(errorData.error || 'Failed to create story');
      }
    } catch (error) {
      console.error('Error creating story:', error);
      alert('Failed to create story');
    } finally {
      setIsLoading(false);
    }
  };

  const generateStoryTitle = (firstMessage) => {
    // ... existing title generation logic ...
    try {
      const words = firstMessage.split(' ').slice(0, 10);
      let title = words.join(' ');
      
      if (title.length > 50) {
        title = title.substring(0, 50) + '...';
      }
      
      // Add some variation
      const titleTemplates = [
        title,
        `A moment about ${title.toLowerCase()}`,
        `When ${title.toLowerCase()}`,
        `The day ${title.toLowerCase()}`
      ];
      
      return titleTemplates[Math.floor(Math.random() * titleTemplates.length)] || 'My Story';
    } catch (error) {
      return 'My Story';
    }
  };

  // Format Generation Functions
  const generateFormat = async (storyId, formatType) => {
    if (!user) {
      setShowLogin(true);
      return;
    }

    setLoadingFormat(true);
    try {
      const response = await fetch(`/api/stories/${storyId}/formats`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-ID': user.user_id
        },
        body: JSON.stringify({ format_type: formatType })
      });

      if (response.ok) {
        const data = await response.json();
        console.log(`${formatType} generated:`, data.content);
        
        // Update the story's createdFormats
        setStories(prev => prev.map(story => 
          story.id === storyId 
            ? { ...story, createdFormats: [...(story.createdFormats || []), formatType] }
            : story
        ));
        
        // Auto-view the generated format
        setFormatContent(data.content);
        setSelectedFormat(formatType);
        setCurrentStoryView(formatType);
      } else {
        const errorData = await response.json();
        console.error('Format generation failed:', errorData.error);
      }
    } catch (error) {
      console.error('Error generating format:', error);
    }
    setLoadingFormat(false);
  };

  const viewFormat = async (storyId, formatType) => {
    setLoadingFormat(true);
    try {
      const response = await fetch(`/api/stories/${storyId}/formats/${formatType}`, {
        headers: user ? { 'X-User-ID': user.user_id } : {}
      });
      
      if (response.ok) {
        const data = await response.json();
        setFormatContent(data.content);
        setSelectedFormat(formatType);
        setCurrentStoryView(formatType);
      } else {
        console.error('Failed to fetch format content');
      }
    } catch (error) {
      console.error('Error fetching format:', error);
    }
    setLoadingFormat(false);
  };

  const backToStory = () => {
    setCurrentStoryView('story');
    setSelectedFormat(null);
    setFormatContent('');
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // Like Functions
  const handleLike = async (storyId, e) => {
    e.stopPropagation();
    if (!user) {
      setShowLogin(true);
      return;
    }

    try {
      const isLiked = likedStories.has(storyId);
      const response = await fetch(`/api/stories/${storyId}/like`, {
        method: isLiked ? 'DELETE' : 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-User-ID': user.id
        }
      });

      if (response.ok) {
        const newLikedStories = new Set(likedStories);
        if (isLiked) {
          newLikedStories.delete(storyId);
        } else {
          newLikedStories.add(storyId);
        }
        setLikedStories(newLikedStories);
        
        // Update story reactions count
        setStories(prevStories => 
          prevStories.map(story => 
            story.id === storyId 
              ? { ...story, reactions: (story.reactions || 0) + (isLiked ? -1 : 1) }
              : story
          )
        );
      }
    } catch (error) {
      console.error('Error toggling like:', error);
    }
  };

  // Comment Functions
  const handleComment = async (storyId) => {
    if (!user) {
      setShowLogin(true);
      return;
    }
    if (!newComment.trim()) return;

    try {
      const response = await fetch(`/api/stories/${storyId}/comments`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-User-ID': user.id
        },
        body: JSON.stringify({
          comment: newComment,
          author: user.name
        })
      });

      if (response.ok) {
        const result = await response.json();
        setComments(prev => ({
          ...prev,
          [storyId]: [...(prev[storyId] || []), {
            id: Date.now(),
            comment: newComment,
            author: user.name,
            timestamp: new Date().toISOString()
          }]
        }));
        setNewComment('');
      }
    } catch (error) {
      console.error('Error posting comment:', error);
    }
  };

  const toggleComments = async (storyId, e) => {
    e.stopPropagation();
    if (!user) {
      setShowLogin(true);
      return;
    }
    
    setShowComments(prev => prev === storyId ? null : storyId);
    
    // Load comments if opening and not already loaded
    if (showComments !== storyId && !comments[storyId]) {
      try {
        const response = await fetch(`/api/stories/${storyId}/comments`);
        if (response.ok) {
          const result = await response.json();
          setComments(prev => ({
            ...prev,
            [storyId]: result.comments || []
          }));
        }
      } catch (error) {
        console.error('Error loading comments:', error);
      }
    }
  };

  // UI Components
  const renderNavbar = () => (
    <nav className="bg-white border-b border-gray-200 px-4 py-2 sticky top-0 z-50">
      <div className="max-width-full flex items-center justify-between">
        <div className="flex items-center gap-6">
          <a href="#" className="text-xl font-bold text-purple-600 no-underline">
            Sentimental
          </a>
          
          <div className="hidden md:flex items-center gap-1">
            {[
              { id: 'discover', label: 'Discover', icon: Search },
              { id: 'share', label: 'Share', icon: MessageCircle },
              { id: 'stories', label: 'Stories', icon: BookOpen }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setCurrentView(tab.id)}
                className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                  currentView === tab.id 
                    ? 'bg-purple-100 text-purple-700' 
                    : 'text-gray-600 hover:text-gray-800 hover:bg-gray-100'
                }`}
              >
                <tab.icon />
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        <div className="flex items-center gap-3">
          {user ? (
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-2">
                {user.photoURL ? (
                  <img 
                    src={user.photoURL} 
                    alt={user.name}
                    className="w-8 h-8 rounded-full border border-gray-200"
                  />
                ) : (
                  <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-semibold">
                      {user.name?.[0]?.toUpperCase() || 'U'}
                    </span>
                  </div>
                )}
                <span className="hidden md:block text-sm font-medium text-gray-700">
                  {user.name}
                </span>
              </div>
              <button
                onClick={handleLogout}
                className="text-sm text-gray-500 hover:text-gray-700 px-3 py-1 rounded-lg hover:bg-gray-100 transition-colors"
              >
                Logout
              </button>
            </div>
          ) : (
            <button
              onClick={() => setShowLogin(true)}
              className="bg-purple-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-purple-700 transition-colors"
            >
              Login
            </button>
          )}
        </div>
      </div>
    </nav>
  );

  const renderLoginModal = () => {
    if (!showLogin) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl max-w-md w-full p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-bold text-gray-900">
              {showLogin ? 'Create Account' : 'Welcome Back'}
            </h2>
            <button 
              onClick={() => setShowLogin(false)}
              className="text-gray-400 hover:text-gray-600"
            >
              <X />
            </button>
          </div>

          <form onSubmit={handleLogin} className="space-y-4">
            {showLogin && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                <input
                  type="text"
                  value={loginForm.name}
                  onChange={(e) => setLoginForm({...loginForm, name: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="Your name"
                />
              </div>
            )}
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
              <input
                type="email"
                value={loginForm.email}
                onChange={(e) => setLoginForm({...loginForm, email: e.target.value})}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="your@email.com"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
              <input
                type="password"
                value={loginForm.password}
                onChange={(e) => setLoginForm({...loginForm, password: e.target.value})}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="••••••••"
                required
              />
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-purple-600 text-white py-3 rounded-lg font-medium hover:bg-purple-700 transition-colors disabled:opacity-50"
            >
              {isLoading ? 'Please wait...' : (showLogin ? 'Create Account' : 'Sign In')}
            </button>
          </form>

          <div className="my-4 flex items-center">
            <div className="flex-1 border-t border-gray-300"></div>
            <span className="px-4 text-sm text-gray-500">or</span>
            <div className="flex-1 border-t border-gray-300"></div>
          </div>

          {/* Google Sign-In Button */}
          <button
            onClick={handleGoogleAuth}
            disabled={isLoading}
            className="w-full bg-white border border-gray-300 text-gray-700 py-3 px-4 rounded-lg font-medium hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3 shadow-sm"
          >
            {isLoading ? (
              <>
                <div className="w-5 h-5 border-2 border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                Signing in...
              </>
            ) : (
              <>
                <svg width="20" height="20" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
              </>
            )}
          </button>

          <div className="mt-4 text-center">
            <button
              onClick={() => setShowLogin(!showLogin)}
              className="text-purple-600 hover:text-purple-700 text-sm"
            >
              {showLogin ? 'Already have an account? Sign in' : "Don't have an account? Sign up"}
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Main View Components will continue in next part due to length...
  
  // Discover Page - Demo Style
  const renderDiscover = () => (
    <div className="p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Discover Stories</h1>
        <p className="text-lg text-gray-600">Beautiful stories from real people around the world</p>
      </div>

      {loadingFormat ? (
        <div className="flex justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
        </div>
      ) : (
        <div className="grid gap-6">
          {stories.filter(s => s.author !== user?.name).map(story => (
            <div key={story.id} className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-200">
              {/* Story Header */}
              <div className="p-6 pb-4">
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                    <span className="text-white font-semibold text-sm">
                      {story.author?.[0]?.toUpperCase() || 'U'}
                    </span>
                  </div>
                  <div>
                    <p className="font-semibold text-gray-900">{story.author || 'Anonymous'}</p>
                    <p className="text-sm text-gray-500">
                      {story.timestamp ? new Date(story.timestamp).toLocaleDateString() : '1 day ago'}
                    </p>
                  </div>
                </div>

                <h2 className="text-xl font-bold text-gray-900 mb-3 leading-tight">{story.title}</h2>
                
                <div className="bg-gray-50 rounded-xl p-4 mb-4">
                  <p className="text-gray-700 leading-relaxed">
                    {story.content?.substring(0, 200)}
                    {story.content?.length > 200 && '...'}
                  </p>
                </div>

                {/* Format Tags */}
                {story.createdFormats && story.createdFormats.length > 0 && (
                  <div className="mb-4 p-3 bg-purple-50 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <Sparkles />
                      <span className="text-sm font-medium text-purple-700">Available formats:</span>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {story.createdFormats.map(format => (
                        <span key={format} className="inline-flex items-center gap-1 px-2 py-1 bg-purple-100 text-purple-700 rounded-md text-xs font-medium">
                          {getFormatIcon(format)} {format.replace('_', ' ')}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                  <div className="flex items-center gap-4">
                    <button 
                      onClick={(e) => handleLike(story.id, e)}
                      className={`flex items-center gap-2 transition-colors ${
                        likedStories.has(story.id) 
                          ? 'text-red-500' 
                          : 'text-gray-500 hover:text-red-500'
                      }`}
                    >
                      <Heart size={18} filled={likedStories.has(story.id)} />
                      <span className="text-sm font-medium">{story.reactions || 0}</span>
                    </button>
                    <button 
                      onClick={(e) => toggleComments(story.id, e)}
                      className="flex items-center gap-2 text-gray-500 hover:text-blue-500 transition-colors"
                    >
                      <MessageCircle />
                      <span className="text-sm">Comment</span>
                    </button>
                  </div>
                  <button 
                    onClick={() => {
                      setSelectedStory(story);
                      setPreviousView('discover');
                      setCurrentView('story-detail');
                    }}
                    className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium"
                  >
                    Read Story
                  </button>
                </div>

                {/* Comments Section */}
                {showComments === story.id && (
                  <div className="mt-4 pt-4 border-t border-gray-100">
                    <div className="space-y-3 mb-4 max-h-40 overflow-y-auto">
                      {(comments[story.id] || []).map(comment => (
                        <div key={comment.id} className="bg-gray-50 rounded-lg p-3">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="text-sm font-semibold text-gray-900">{comment.author}</span>
                            <span className="text-xs text-gray-500">
                              {new Date(comment.timestamp).toLocaleDateString()}
                            </span>
                          </div>
                          <p className="text-sm text-gray-700">{comment.comment}</p>
                        </div>
                      ))}
                    </div>
                    
                    {user && (
                      <div className="flex gap-2">
                        <input
                          type="text"
                          value={newComment}
                          onChange={(e) => setNewComment(e.target.value)}
                          placeholder="Add a comment..."
                          className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                          onKeyPress={(e) => {
                            if (e.key === 'Enter') {
                              handleComment(story.id);
                            }
                          }}
                        />
                        <button
                          onClick={() => handleComment(story.id)}
                          className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm"
                        >
                          Post
                        </button>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
          
          {stories.filter(s => s.author !== user?.name).length === 0 && (
            <div className="text-center py-12 bg-white rounded-2xl border border-gray-200">
              <div className="text-6xl mb-4">📚</div>
              <h3 className="text-xl font-bold text-gray-900 mb-2">No stories to discover yet</h3>
              <p className="text-gray-600 mb-6">Be the first to share your story!</p>
              <button 
                onClick={() => setCurrentView('share')}
                className="px-6 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all font-medium"
              >
                Share Your Story
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );

  // Share Page - Chat Interface
  const renderShare = () => (
    <div className="flex flex-col h-screen">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 p-4">
        <div className="max-w-4xl mx-auto flex items-center justify-between">
          <div>
            <h1 className="text-xl font-bold text-gray-900">Share Your Story</h1>
            <p className="text-sm text-gray-600">Turn your experiences into beautiful stories</p>
          </div>
          
          {messages.length > 0 && (
            <button
              onClick={createStoryFromConversation}
              disabled={isLoading}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {isLoading ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Creating...
                </>
              ) : (
                <>
                  <Plus size={16} />
                  Create Story
                </>
              )}
            </button>
          )}
        </div>
      </div>

      {/* Chat Container */}
      <div className="flex-1 max-w-4xl mx-auto w-full overflow-hidden flex flex-col">
        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-6 space-y-6">
          {messages.length === 0 ? (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-6">
                <MessageCircle />
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-4">What's your story?</h2>
              <p className="text-gray-600 mb-8 max-w-lg mx-auto">
                Share any moment, feeling, or experience that feels meaningful to you. 
                I'll help you explore it and turn it into a beautiful story.
              </p>
              
              <div className="grid gap-4 max-w-2xl mx-auto">
                {[
                  "I want to share a moment that really impacted me...",
                  "Something amazing happened recently that I keep thinking about...",
                  "I achieved something I'm really proud of...",
                  "I learned something important about myself...",
                  "There's a relationship in my life that means everything to me...",
                  "I overcame something that seemed impossible..."
                ].map((prompt, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setMessage(prompt);
                      setTimeout(() => sendMessage(), 100);
                    }}
                    className="text-left p-4 bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl hover:from-purple-100 hover:to-pink-100 transition-all duration-200 shadow-sm hover:shadow-md"
                  >
                    <span className="text-purple-700 font-medium">{prompt}</span>
                  </button>
                ))}
              </div>
            </div>
          ) : (
            <>
              {messages.map((message) => (
                <div key={message.id} className={`flex ${message.sender === 'You' ? 'justify-end' : 'justify-start'}`}>
                  {message.sender !== 'You' && (
                    <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center mr-3 mt-1">
                      <span className="text-white text-sm font-semibold">AI</span>
                    </div>
                  )}
                  <div className={`max-w-[75%] p-4 rounded-2xl ${
                    message.sender === 'You' 
                      ? 'bg-purple-600 text-white rounded-br-lg' 
                      : 'bg-white text-gray-900 rounded-bl-lg border border-gray-200'
                  }`}>
                    <p className="leading-relaxed">{message.content}</p>
                    <p className="text-xs opacity-70 mt-2">
                      {new Date(message.timestamp).toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              ))}
              
              {isLoading && (
                <div className="flex justify-start">
                  <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center mr-3 mt-1">
                    <span className="text-white text-sm font-semibold">AI</span>
                  </div>
                  <div className="bg-white text-gray-900 p-4 rounded-2xl rounded-bl-lg border border-gray-200">
                    <div className="flex items-center gap-2">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                      </div>
                      <span className="text-sm text-gray-500">Thinking...</span>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}
        </div>

        {/* Input Area */}
        <div className="border-t border-gray-200 bg-white p-4">
          <div className="flex items-end gap-3">
            <textarea
              value={message}
              onChange={(e) => {
                setMessage(e.target.value);
                e.target.style.height = 'auto';
                e.target.style.height = Math.min(e.target.scrollHeight, 120) + 'px';
              }}
              onKeyPress={handleKeyPress}
              placeholder={messages.length === 0 ? "Share what's on your mind..." : "Continue your story..."}
              disabled={isLoading}
              className="flex-1 p-3 border border-gray-300 rounded-2xl focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none text-base max-h-32"
              rows="1"
            />
            <button 
              onClick={sendMessage} 
              disabled={isLoading || !message.trim()}
              className="bg-purple-600 text-white p-3 rounded-2xl hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed min-w-[48px] h-[48px] flex items-center justify-center"
            >
              {isLoading ? (
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <span className="font-medium">Send</span>
              )}
            </button>
          </div>

          {/* Auto Create Story Button - Show when there's meaningful conversation */}
          {messages.length > 0 && !isLoading && (
            <div className="mt-4 text-center">
              <button
                onClick={async () => {
                  await createStoryFromConversation();
                  if (currentView === 'stories') { // Will be set by createStoryFromConversation
                    // Show success message
                    setTimeout(() => {
                      alert('🎉 Your story has been created and added to your Stories!');
                    }, 500);
                  }
                }}
                disabled={isLoading}
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-4 px-8 rounded-xl transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none shadow-lg hover:shadow-xl flex items-center gap-3 mx-auto"
              >
                <span className="text-2xl">✨</span>
                <div className="text-left">
                  <div className="text-lg">Create My Story</div>
                  <div className="text-sm opacity-90">Turn this conversation into a beautiful story</div>
                </div>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M5 12h14M12 5l7 7-7 7"/>
                </svg>
              </button>
              <p className="text-sm text-gray-500 mt-2">
                Your conversation will be transformed into a story and saved to your Stories page
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  // Stories Page - Your Stories
  const renderStories = () => (
    <div className="p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Your Stories</h1>
        <p className="text-lg text-gray-600">Stories you've created and shared</p>
      </div>

      {user ? (
        <div>
          {stories.filter(s => s.author === user.name).length === 0 ? (
            <div className="text-center py-12 bg-white rounded-2xl border border-gray-200">
              <div className="text-6xl mb-4">📖</div>
              <h3 className="text-xl font-bold text-gray-900 mb-2">No stories yet</h3>
              <p className="text-gray-600 mb-6">Share your first story to get started</p>
              <button 
                onClick={() => setCurrentView('share')}
                className="px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl hover:from-purple-700 hover:to-pink-700 transition-all font-medium"
              >
                Share Your Story
              </button>
            </div>
          ) : (
            <div className="grid gap-6">
              {stories.filter(s => s.author === user.name).map(story => (
                <div key={story.id} className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 hover:shadow-lg transition-all duration-200">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="text-xl font-bold text-gray-900 mb-2">{story.title}</h3>
                      <div className="flex items-center gap-3 text-sm text-gray-500 mb-4">
                        <span>{story.timestamp ? new Date(story.timestamp).toLocaleDateString() : '1 day ago'}</span>
                        <div className="flex items-center gap-1">
                          <Heart size={14} />
                          <span>{story.reactions || 0}</span>
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={() => setSelectedStory(story)}
                      className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
                    >
                      <Edit />
                    </button>
                  </div>
                  
                  <div className="mb-4 p-4 bg-gray-50 rounded-xl">
                    <p className="text-gray-700 leading-relaxed">
                      {story.content?.substring(0, 200)}
                      {story.content?.length > 200 && '...'}
                    </p>
                  </div>

                  {/* Generated formats */}
                  {story.createdFormats && story.createdFormats.length > 0 && (
                    <div className="mb-4 p-3 bg-green-50 rounded-lg border border-green-200">
                      <div className="flex items-center gap-2 mb-2">
                        <Sparkles />
                        <span className="text-sm font-medium text-green-700">Generated formats:</span>
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {story.createdFormats.map(format => (
                          <span key={format} className="inline-flex items-center gap-1 px-2 py-1 bg-green-100 text-green-700 rounded-md text-xs font-medium">
                            {getFormatIcon(format)} {format.replace('_', ' ')}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  <div className="flex gap-3">
                    <button 
                      onClick={() => {
                        setSelectedStory(story);
                        setPreviousView('stories');
                        setCurrentView('story-detail');
                      }}
                      className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium"
                    >
                      View & Format
                    </button>
                    <button 
                      onClick={() => {
                        if (navigator.share) {
                          navigator.share({
                            title: story.title,
                            text: story.content?.substring(0, 100) + '...',
                            url: window.location.href
                          });
                        } else {
                          navigator.clipboard.writeText(`${story.title}\n\n${story.content}`);
                          alert('Story copied to clipboard!');
                        }
                      }}
                      className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium"
                    >
                      Share
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      ) : (
        <div className="text-center py-12 bg-white rounded-2xl border border-gray-200">
          <div className="text-6xl mb-4">🔒</div>
          <h3 className="text-xl font-bold text-gray-900 mb-2">Login Required</h3>
          <p className="text-gray-600 mb-6">Please login to view your stories</p>
          <button 
            onClick={() => setShowLogin(true)}
            className="px-6 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all font-medium"
          >
            Login
          </button>
        </div>
      )}
    </div>
  );

  // Story Detail Modal with Format Generation
  const renderStoryDetail = () => {
    if (!selectedStory) return null;

    // If viewing a specific format, show that instead
    if (selectedFormat && formatContent) {
      return (
        <div className="p-6">
          <div className="max-w-4xl mx-auto">
            {/* Back button */}
            <button
              onClick={backToStory}
              className="flex items-center gap-2 mb-6 text-gray-600 hover:text-gray-800 transition-colors"
            >
              <ArrowLeft />
              <span>Back to Story</span>
            </button>

            {/* Format content */}
            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
              {/* Special previews for video and music formats */}
              {selectedFormat === 'video' && (
                <div className="bg-gradient-to-r from-gray-900 to-black text-white p-8 text-center">
                  <div className="max-w-md mx-auto">
                    <div className="mb-4">
                      <div className="w-16 h-16 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-4">
                        <Play size={24} />
                      </div>
                    </div>
                    <h3 className="text-xl font-bold mb-2">Video Script Ready</h3>
                    <p className="text-gray-300">Ready for video production platforms</p>
                  </div>
                </div>
              )}

              {selectedFormat === 'song' && (
                <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-8 text-center">
                  <div className="max-w-md mx-auto">
                    <div className="mb-4">
                      <div className="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4">
                        <Headphones size={24} />
                      </div>
                    </div>
                    <h3 className="text-xl font-bold mb-2">Song Lyrics Ready</h3>
                    <p className="text-purple-100">Ready for music production</p>
                  </div>
                </div>
              )}

              {/* Content section */}
              <div className="p-8">
                <div className="prose max-w-none">
                  <pre className="whitespace-pre-wrap font-sans text-gray-800 leading-relaxed">
                    {formatContent}
                  </pre>
                </div>

                {/* Action buttons */}
                <div className="mt-8 flex gap-4">
                  <button
                    onClick={() => navigator.clipboard.writeText(formatContent)}
                    className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                  >
                    <Copy />
                    <span>Copy</span>
                  </button>
                  <button
                    onClick={() => {
                      if (navigator.share) {
                        navigator.share({
                          title: `${selectedStory.title} - ${selectedFormat}`,
                          text: formatContent
                        });
                      }
                    }}
                    className="flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                  >
                    <Share2 />
                    <span>Share</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }

    // Regular story detail view
    return (
      <div className="p-6">
        <div className="max-w-4xl mx-auto">
          {/* Back button */}
          <button
            onClick={() => setCurrentView(previousView || 'discover')}
            className="flex items-center gap-2 mb-6 text-gray-600 hover:text-gray-800 transition-colors"
          >
            <ArrowLeft />
            <span>Back to {previousView === 'stories' ? 'Your Stories' : 'Discover'}</span>
          </button>

          {/* Story content */}
          <div className="bg-white rounded-xl shadow-lg p-8 mb-6">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">{selectedStory.title}</h1>
            <div className="flex items-center gap-3 text-sm text-gray-500 mb-4">
              <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                <span className="text-white font-semibold text-xs">
                  {selectedStory.author?.[0]?.toUpperCase() || 'U'}
                </span>
              </div>
              <span>By {selectedStory.author || 'Anonymous'}</span>
              <span>•</span>
              <span>{selectedStory.timestamp ? new Date(selectedStory.timestamp).toLocaleDateString() : '1 day ago'}</span>
            </div>
            <div className="prose max-w-none">
              <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">{selectedStory.content}</p>
            </div>
          </div>

          {/* Format section - different for own vs others' stories */}
          {user && selectedStory.author === user.name ? (
            /* Own story - show format generation section */
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">Generate Formats</h2>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {[
                  { type: 'song', name: 'Song Lyrics', gradient: 'from-purple-500 to-pink-500' },
                  { type: 'tweet', name: 'Tweet Thread', gradient: 'from-blue-500 to-cyan-500' },
                  { type: 'linkedin', name: 'LinkedIn Post', gradient: 'from-blue-600 to-blue-700' },
                  { type: 'article', name: 'Article', gradient: 'from-gray-600 to-gray-700' },
                  { type: 'video', name: 'Video Script', gradient: 'from-red-500 to-red-600' },
                  { type: 'poem', name: 'Poem', gradient: 'from-indigo-500 to-purple-600' }
                ].map((format) => {
                  const isCreated = selectedStory.createdFormats && selectedStory.createdFormats[format.type];
                  return (
                    <button
                      key={format.type}
                      onClick={() => {
                        if (isCreated) {
                          viewFormat(selectedStory.id, format.type);
                        } else {
                          generateFormat(selectedStory.id, format.type);
                        }
                      }}
                      className={`relative group p-4 rounded-xl bg-gradient-to-r ${format.gradient} text-white hover:scale-105 transition-all duration-200 shadow-md hover:shadow-lg`}
                      style={{
                        '--tw-gradient-from': format.gradient.includes('purple') ? '#8b5cf6' : 
                                             format.gradient.includes('blue') ? '#3b82f6' :
                                             format.gradient.includes('cyan') ? '#06b6d4' :
                                             format.gradient.includes('gray') ? '#6b7280' :
                                             format.gradient.includes('red') ? '#ef4444' :
                                             format.gradient.includes('indigo') ? '#6366f1' :
                                             format.gradient.includes('pink') ? '#ec4899' :
                                             format.gradient.includes('green') ? '#10b981' : '#8b5cf6',
                        '--tw-gradient-to': format.gradient.includes('pink') ? '#ec4899' :
                                           format.gradient.includes('cyan') ? '#06b6d4' :
                                           format.gradient.includes('blue-700') ? '#1d4ed8' :
                                           format.gradient.includes('gray-700') ? '#374151' :
                                           format.gradient.includes('red-600') ? '#dc2626' :
                                           format.gradient.includes('purple-600') ? '#9333ea' :
                                           format.gradient.includes('orange') ? '#f97316' :
                                           format.gradient.includes('teal') ? '#14b8a6' : '#a855f7'
                      }}
                    >
                      <div className="flex items-center gap-2">
                        {getFormatIcon(format.type)}
                        <span className="text-sm">{format.name}</span>
                      </div>
                      {isCreated && (
                        <div className="absolute top-1 right-1">
                          <div className="w-2 h-2 bg-white rounded-full"></div>
                        </div>
                      )}
                    </button>
                  );
                })}
              </div>
              
              {loadingFormat && (
                <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center justify-center gap-3">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-purple-600"></div>
                    <span className="text-gray-600">Generating format...</span>
                  </div>
                </div>
              )}
            </div>
          ) : (
            /* Other's story - show only existing formats */
            selectedStory.createdFormats && Object.keys(selectedStory.createdFormats).length > 0 && (
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
                <h2 className="text-xl font-semibold text-gray-800 mb-4">Available Formats</h2>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {Object.keys(selectedStory.createdFormats).map((formatType) => {
                    const formatNames = {
                      song: 'Song Lyrics',
                      tweet: 'Tweet Thread', 
                      linkedin: 'LinkedIn Post',
                      article: 'Article',
                      video: 'Video Script',
                      poem: 'Poem',
                      instagram: 'Instagram Post'
                    };
                    
                    const formatGradients = {
                      song: 'from-purple-500 to-pink-500',
                      tweet: 'from-blue-500 to-cyan-500',
                      linkedin: 'from-blue-600 to-blue-700',
                      article: 'from-gray-600 to-gray-700',
                      video: 'from-red-500 to-red-600',
                      poem: 'from-indigo-500 to-purple-600',
                      instagram: 'from-pink-500 to-orange-500'
                    };

                    return (
                      <button
                        key={formatType}
                        onClick={() => viewFormat(selectedStory.id, formatType)}
                        className={`relative group p-4 rounded-xl bg-gradient-to-r ${formatGradients[formatType]} text-white hover:scale-105 transition-all duration-200 shadow-md hover:shadow-lg`}
                      >
                        <div className="flex items-center gap-2">
                          {getFormatIcon(formatType)}
                          <span className="text-sm">{formatNames[formatType] || formatType}</span>
                        </div>
                        <div className="absolute top-1 right-1">
                          <Eye size={16} />
                        </div>
                      </button>
                    );
                  })}
                </div>
              </div>
            )
          )}
          
          {/* Interactions section */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <button
                  onClick={(e) => handleLike(selectedStory.id, e)}
                  className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors"
                >
                  <Heart size={18} />
                  <span>{selectedStory.reactions || 0}</span>
                </button>
                <button
                  onClick={(e) => toggleComments(selectedStory.id, e)}
                  className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-blue-500 hover:bg-blue-50 rounded-lg transition-colors"
                >
                  <MessageCircle size={18} />
                  <span>Comments</span>
                </button>
              </div>
            </div>

            {/* Comments section */}
            {showComments[selectedStory.id] && (
              <div className="mt-6 pt-6 border-t border-gray-100">
                <div className="space-y-4">
                  {(storyComments[selectedStory.id] || []).map((comment, index) => (
                    <div key={index} className="bg-gray-50 rounded-lg p-4">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center text-white text-xs">
                          {comment.author.charAt(0).toUpperCase()}
                        </div>
                        <span className="font-medium text-gray-800">{comment.author}</span>
                        <span className="text-sm text-gray-500">{comment.timestamp}</span>
                      </div>
                      <p className="text-gray-700">{comment.comment}</p>
                    </div>
                  ))}
                </div>
                
                {user && (
                  <div className="mt-4">
                    <textarea
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      placeholder="Add a comment..."
                      className="w-full p-3 border border-gray-200 rounded-lg resize-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      rows={3}
                    />
                    <button
                      onClick={() => handleComment(selectedStory.id)}
                      disabled={!newComment.trim()}
                      className="mt-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    >
                      Post Comment
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
  };

  // Main Render Logic
  const renderMainContent = () => {
    switch(currentView) {
      case 'discover': return renderDiscover();
      case 'share': return renderShare();
      case 'stories': return renderStories();
      case 'story-detail': return renderStoryDetail();
      default: return renderDiscover();
    }
  };

  // Mobile Footer Navigation
  const renderMobileFooter = () => (
    <div className="md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-50">
      <div className="flex items-center justify-around py-2">
        {[
          { 
            id: 'discover', 
            label: 'Discover', 
            icon: () => (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <circle cx="11" cy="11" r="8"/>
                <path d="m21 21-4.35-4.35"/>
              </svg>
            )
          },
          { 
            id: 'share', 
            label: 'Share', 
            icon: () => (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
              </svg>
            )
          },
          { 
            id: 'stories', 
            label: 'Stories', 
            icon: () => (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
                <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
              </svg>
            )
          },
          { 
            id: 'inner-space', 
            label: 'Space', 
            icon: () => (
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <circle cx="12" cy="12" r="10"/>
                <polygon points="16.24,7.76 14.12,14.12 7.76,16.24 9.88,9.88"/>
              </svg>
            )
          }
        ].map((tab) => (
          <button
            key={tab.id}
            onClick={() => {
              if (tab.id === 'inner-space') {
                alert('🚀 Inner Space is coming soon! A personal dashboard for deeper insights into your stories and patterns.');
              } else {
                setCurrentView(tab.id);
              }
            }}
            className={`flex flex-col items-center gap-1 px-3 py-2 rounded-lg transition-colors ${
              currentView === tab.id 
                ? 'text-purple-600' 
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <div className={`${currentView === tab.id ? 'text-purple-600' : 'text-gray-500'}`}>
              <tab.icon />
            </div>
            <span className="text-xs font-medium">{tab.label}</span>
          </button>
        ))}
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {renderNavbar()}
      {renderLoginModal()}
      
      {/* Main Content with bottom padding on mobile for footer */}
      <div className="max-w-6xl mx-auto pb-20 md:pb-0">
        {renderMainContent()}
      </div>

      {/* Mobile Footer Navigation */}
      {renderMobileFooter()}
    </div>
  );
};

// Make it available globally
window.SentimentalApp = SentimentalApp;